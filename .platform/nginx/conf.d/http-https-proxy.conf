
#this file is included in the http {} context of the main nginx.conf
#so it can affect parameter of that
#everything here is static(straight copy by EB, no processing after that)
#server_names_hash_bucket_size 128;

proxy_connect_timeout 120s;
proxy_send_timeout 120s;
proxy_read_timeout 120s;
fastcgi_send_timeout 120s;
fastcgi_read_timeout 120s;
map $http_upgrade $connection_upgrade {
  default     "upgrade";
}
server {
    # capture all traffic on port 80 (http, unsecure)
      # after cert success certbot will create a server block that redirects all traffic
      # from port 80 (and 8080, default nginx) to port 443 (https, secure) # default nginx service port

    # define the server name so certbot can configure SSL after cert success
      # this is either the EB environment URL or a custom domain
      # custom domains must have a DNS CNAME record pointing to the EB environment URL
    # server_name oasbeta.us-east-2.elasticbeanstalk.com;

    if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
        set $year $1;
        set $month $2;
        set $day $3;
        set $hour $4;
    }

    access_log /var/log/nginx/access.log main;
    #access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;
	
    # location block to route access for ACME challenge
    # certbot uses the endpoint /.well-known/acme-challenge/<CODE_FILE_NAME> during verification
    location ~ /.well-known {
        allow all;
        # direct requests to the webroot where certbot creates the ACME challenge code
          # this is the default webroot for AWS Linux AMI nginx
          # any webroot can be used but must match the webroot param (-w) in the certbot command
        root /usr/share/nginx/html;
    }
    
    #this is from .platform file
    #force ssl, no until everything is setup then change this to yes and re-deploy
    #may be changed by postdeploy hooks(under hooks or confighooks), check README.txt 
    set $ssl N;
    
    set $redirect N;
    set $is_https N;
    if ($https = "on") {
       set $is_https Y;
    }

    if ($http_x_forwarded_proto = "http") {
       set $redirect Y;
    }
    if ($http_x_forwarded_proto = "ws") {
       set $redirect Y;
    }
    if ($http_x_forwarded_proto = '') {
       set $redirect Y;
    }
    if ($http_user_agent ~* "ELB-HealthChecker") {
       set $redirect N;
    }
    if ($request_uri ~* ".well-known") {
       set $redirect N;
    }
    set $force_redirect ${ssl}${redirect}${is_https};

    if ($force_redirect = YYN) {
       return 302 https://$host$request_uri;
    }

    location / {
        proxy_pass          http://127.0.0.1:8000;
        proxy_http_version  1.1;

        proxy_set_header    Connection          $connection_upgrade;
        proxy_set_header    Upgrade             $http_upgrade;
        proxy_set_header    Host                $host;
        proxy_set_header    X-Real-IP           $remote_addr;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    }

    client_max_body_size 50M;
    #below can be important for AWS ELB if request is long running one
    #client_header_timeout 60;
    #client_body_timeout   60;
    #keepalive_timeout     60;

    # enable gzip compression for faster data transmission to clients
    gzip on;
    gzip_comp_level 4;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    listen 80; 
	listen 443 ssl; # managed by Certbot
	#we use a fixed name 'default' which would symlink to the real thing
    ssl_certificate /etc/letsencrypt/live/default/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/default/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

