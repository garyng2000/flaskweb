# REQUIREMENTS
# set the following configuration environment variables(BEFORE first round deploy environment) at: configuration -> software -> modify -> environment variables

# CERT_EMAIL: the email address used for registering the cert
# CERT_DOMAIN: the domain to create a cert for

# EB environment URL (listed at the top of the environment page) or a custom domain, custom domains must have a DNS CNAME record pointing to the EB environment URL
# !! MUST NOT have "http://" prefix or the trailing "/" at the end !!

# EXAMPLES
# CERT_EMAIL: mymail@gmail.com
# CERT_DOMAIN: certbot-sample.us-east-1.elasticbeanstalk.com

#enable EB to listen on port 443
Resources:
  sslSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
        GroupId: {"Fn::GetAtt" : ["AWSEBSecurityGroup", "GroupId"]}
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443
        CidrIp: 0.0.0.0/0
            
commands:
  add-certbot:
    command: |
      amazon-linux-extras install epel -y
      yum install epel-release -y
      yum install certbot-nginx -y
    
files:
  # create a custom nginx proxy config that will be targetd by certbot
  # after certificate is issued certbot will populate this file with SSL terminating attributes
  /etc/nginx/conf.d/http-https-proxy.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      
      #server_names_hash_bucket_size 128;

      proxy_connect_timeout 120s;
      proxy_send_timeout 120s; 
      proxy_read_timeout 120s; 
      fastcgi_send_timeout 120s; 
      fastcgi_read_timeout 120s;    
      map $http_upgrade $connection_upgrade {
        default     "upgrade";
      }      
      server {
          # capture all traffic on port 80 (http, unsecure)
            # after cert success certbot will create a server block that redirects all traffic
            # from port 80 (and 8080, default nginx) to port 443 (https, secure)
          listen 80;
          listen 8080; # default nginx service port
        
          # define the server name so certbot can configure SSL after cert success
            # this is either the EB environment URL or a custom domain
            # custom domains must have a DNS CNAME record pointing to the EB environment URL
          server_name `{"Fn::GetOptionSetting": {"Namespace": "aws:elasticbeanstalk:application:environment", "OptionName": "CERT_DOMAIN"}}`;
          
          if ($time_iso8601 ~ "^(\d{4})-(\d{2})-(\d{2})T(\d{2})") {
              set $year $1;
              set $month $2;
              set $day $3;
              set $hour $4;
          }

          access_log /var/log/nginx/access.log main;
          #access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour healthd;
          
          # location block to route access for ACME challenge
          # certbot uses the endpoint /.well-known/acme-challenge/<CODE_FILE_NAME> during verification 
          location ~ /.well-known {
              allow all;
              # direct requests to the webroot where certbot creates the ACME challenge code
                # this is the default webroot for AWS Linux AMI nginx
                # any webroot can be used but must match the webroot param (-w) in the certbot command
              root /usr/share/nginx/html;
          }
          
          set $ssl Y;
          set $redirect N;
          set $is_https N;
          if ($https = "on") {
             set $is_https Y;
          }

          if ($http_x_forwarded_proto = "http") {
             set $redirect Y;
          }
          if ($http_x_forwarded_proto = "ws") {
             set $redirect Y;
          }
          if ($http_x_forwarded_proto = '') {
             set $redirect Y;
          }
          if ($http_user_agent ~* "ELB-HealthChecker") {
             set $redirect N;
          }
          if ($request_uri ~* ".well-known") {
             set $redirect N;
          }
          set $force_redirect ${ssl}${redirect}${is_https};
          
          
          #if ($force_redirect = YYN) {
          #   return 302 https://$host$request_uri;
          #}

          location / {
              proxy_pass          http://127.0.0.1:8000;
              proxy_http_version  1.1;

              proxy_set_header    Connection          $connection_upgrade;
              proxy_set_header    Upgrade             $http_upgrade;
              proxy_set_header    Host                $host;
              proxy_set_header    X-Real-IP           $remote_addr;
              proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
          }

          client_max_body_size 50M;
          #below can be important for AWS ELB if request is long running one
          #client_header_timeout 60;
          #client_body_timeout   60;
          #keepalive_timeout     60;
          
          # enable gzip compression for faster data transmission to clients
          gzip on;
          gzip_comp_level 4;
          gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
      }

# script commands to setup and run the certbot process
container_commands:
  # these are run in alphabetical order hence the numbering prefix

  # make the default EB proxy conf a backup to prevent conflict with new conf
  10_decomission_default_proxy_conf:
    command: |
      #1. patch to allow longer server name
      #sed -i -e 's/default_type/server_names_hash_bucket_size 128;\n    default_type/' /etc/nginx/nginx.conf
      #1. replace nginx.conf with ours
      #cp .ebextensions/platform/nginx.conf /etc/nginx/nginx.conf
      #2. disable default proxy(should it)
      #echo /etc/nginx/elasticbeanstalk/00_application.conf /etc/nginx/conf.d/elasticbeanstalk/00_application.conf.bak
      #3. move our conf file to nginx proper
      #echo /etc/nginx/conf.d/http-https-proxy.conf.bak /etc/nginx/conf.d/http-https-proxy.conf
      #4. install dummy cert
      mkdir -p /etc/letsencrypt/live/acme.local
      rsync -a .ebextensions/letsencrypt/* /etc/letsencrypt/live/acme.local/
      ln -sfn acme.local /etc/letsencrypt/live/default
    #ignoreErrors: true  
  # reload to use new conf
  20_reload_nginx_conf:
    command: systemctl restart nginx

  # run certbot process
  # creates an ACME challenge in the webroot directory
  # verifies the challenge with an http (80) request
  # installs the certificate in /etc/letsencrypt/live/<DOMAIN_NAME>
  # updates /etc/nginx/conf.d/http-https-proxy.conf to listen on 443, use the cert, and redirect all unsecure traffic (80, http) to 443 (https)
  
  30_run_certbot:
    # --debug: required by AWS Linux AMI to install certbot deps
    # --redirect: creates nginx port :80 -> :443 redirect rule on success
    # --agree-tos: agrees to TOS without prompting
    # -n: run without user interaction
    # -d: set domain for certificate
    # -m: set email for ACME account registration
    # -i: select nginx as the installer plugin to update the conf file on success
    # -a: select webroot as the authenticator plugin to use the ACME challenge
    # -w: set the webroot path for serving the ACME challenge
    command:  |
      dos2unix .ebextensions/scripts/install-certbot.sh && /bin/bash .ebextensions/scripts/install-certbot.sh
      #certbot --debug --non-interactive --redirect --agree-tos --nginx --email ${CERT_EMAIL} --domains ${CERT_DOMAIN} --keep-until-expiring
      #certbot --test-cert --debug --non-interactive --redirect --agree-tos --nginx --email ${CERT_EMAIL} --domains ${CERT_DOMAIN} --keep-until-expiring
      # !! --test-cert: REMOVE FOR PRODUCTION, use the staging server for the certificate !!
      #make the modified http-https-proxy.conf listen on 80/443(certbot make it 443 only which is not good for behind ALB
      #sed -i 's/listen 443 ssl;/listen 80; listen 443 ssl;/' /etc/nginx/conf.d/http-https-proxy.conf
      #enable ssl redirection
      #sed -i 's/set \$ssl N;/set $ssl Y;/' /etc/nginx/conf.d/http-https-proxy.conf
      #4. make a copy of the modified .conf to platform(disappeared after deploy !!, restore via postdeploy hook)
      #mkdir -p /tmp/nginx/conf.d && cp -a /etc/nginx/conf.d/http-https-proxy.conf /tmp/nginx/conf.d/
      #5 also save it to /tmp, urber important
      #cp -a /etc/nginx/conf.d/http-https-proxy.conf /tmp/  
      #[[ -e /etc/letsencrypt/live/${CERT_DOMAIN} ]] && ln -nsf ${CERT_DOMAIN} /etc/letsencrypt/live/default
    ignoreErrors: true  
    
  # reload nginx to apply new conf
  40_restart_nginx:
    # depending on your AMI this may fail
    # if it does replace with: service nginx restart or reload
    command: systemctl restart nginx
    
  # setup cron job to auto renew certificates
  50_setup_cron_job:
    command: "dos2unix .ebextensions/scripts/add-certbot-renew.sh && /bin/bash .ebextensions/scripts/add-certbot-renew.sh"
    ignoreErrors: true